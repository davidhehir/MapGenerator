import com.StaticMapGenerator.IO.Location
import java.io.{BufferedOutputStream, FileOutputStream, OutputStream, InputStream}
import java.net.{HttpURLConnection, URL}

/**
 *
 * @constructor The main guy, this converts the location data into a static google maps
 *             image with an overlay showing the locations travelled to in order.
 */
class MapGenerator() {

  /**
   * Generates a map image containing markers based on the locations supplied.
   * This image is generated by google maps and downloaded to the supplied url
   *
   * @param locations the locations to include on the map
   * @param fileName the file location to save the generated image to.
   */
  def GenerateStaticMap(locations : List[Location], fileName : String) {
    val urlBuilder = new StaticMapUrlBuilder()
    val mapUrl = urlBuilder.BuildUrl(locations)
    downloadImage(mapUrl, fileName)
  }

  /**
   * Downloads an image given its url. Save the downloaded image to the file
   * specified.
   * @param imageUrl  The url of the image to download.
   * @param imageFileName The file location that the downloaded image should be saved to.
   */
  private def downloadImage(imageUrl : String, imageFileName : String) {

    var out : OutputStream = null
    var in : InputStream = null
    try {
      val url = new URL(imageUrl)

      // connect to the supplied url and get the data
      val connection = url.openConnection().asInstanceOf[HttpURLConnection]
      connection.setRequestMethod("GET")
      in = connection.getInputStream()

      // write the data out to the supplied file name
      out = new BufferedOutputStream(new FileOutputStream(imageFileName))

      // convert the input stream to a byte array
      val byteArray = Stream.continually(in.read).takeWhile(-1 !=).map(_.toByte).toArray
      out.write(byteArray)
    } catch {
      // dump any errors for the time being
      // TODO: what should i return when the image download fails?
      case e : Exception => println(e.printStackTrace())
    } finally {
      // tidy up
      out.close()
      in.close()
    }
  }
}

class StaticMapUrlBuilder(height : Integer = 400, width : Integer = 400) {

  // base static map api url. From this we add on the location data
  // then request the image.
  private val baseUrl = "http://maps.googleapis.com/maps/api/staticmap?&sensor=false"

  private val size = "%sx%s".format(width, height)

  /**
   * Creates a static google map url based on the locations.
   * Currently just adds all the locations as markers.
   * @param locations the locations to add to the
   * @return
   */
  def BuildUrl(locations : List[Location]) : String  = {
    // the marker part of the url string is only interested in the lat, long currently.
    // so convert the location list in to a string in the following format:
    // lat1,long1%7Clat2,long2%7C....
    // the %7C is a url form of a pipe (|)
    val locationsAsMarkers = locations.flatMap(l => l.Latitude + "," + l.Longitude).mkString("", "%7C", "")
    val markersUrlComponent = "color:blue%7C" + locationsAsMarkers

    baseUrl + "&size=" + size + "&markers=" + markersUrlComponent
  }
}